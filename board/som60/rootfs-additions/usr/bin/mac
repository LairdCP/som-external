#!/bin/sh

MAC_ADDRESS_PARAM_LEN=17
fw_opt=
enable_write=false
enable_erase=false
nvmem=false
writes="1 2"
NVMEM_FILE="/sys/bus/nvmem/devices/0-00500/nvmem"
MACB0_ADDRESS_NODE="/sys/bus/nvmem/devices/0-00500/of_node/mac-address@2"
MACB1_ADDRESS_NODE="/sys/bus/nvmem/devices/0-00500/of_node/mac-address@8"

get_cell_offset()
{
	echo "$(( 0x$(xxd -g 4 -l 4 -p "${1}/reg") ))"
}

usage()
{
	echo "usage: write: ${0##*/} [-nand] [-f] [-s] [-nvmem] xx:xx:xx:xx:xx:xx|xxxxxxxxxxxx"
	echo "       read:  ${0##*/} [-nand] [-nvmem]"
	echo "-nand  - uses uboot environment blocks in NAND"
	echo "-f     - writes addresses into uboot environment"
	echo "-e     - erases addresses from uboot environment"
	echo "-s     - writes only once (programs only single block)"
	echo "-nvmem - read and write from nvmem, not u-boot environment"
}

read_mac()
{
	fw_printenv ${fw_opt} -n "${1}"
}

print_macs()
{
	if ${nvmem}; then
		dd if="${NVMEM_FILE}" count=1 bs=6 skip="$(get_cell_offset "${MACB0_ADDRESS_NODE}")" iflag=skip_bytes status=none | hexdump -e'"macb0: "' -e' 5/1 "%02x:" ""  "%02x"' -e "\"\n\""
		dd if="${NVMEM_FILE}" count=1 bs=6 skip="$(get_cell_offset "${MACB1_ADDRESS_NODE}")" iflag=skip_bytes status=none | hexdump -e'"macb1: "' -e' 5/1 "%02x:" ""  "%02x"' -e "\"\n\""
	else
		printf "macb0: %s\n" "$(read_mac "ethaddr")"
		printf "macb1: %s\n" "$(read_mac "eth1addr")"
	fi
}

set_mac()
{
	# $1 - mac in numeric format
	# $2 - mac of-node
	printf "\\x$(printf "%012x" "${1}" | sed 's/../&\\x/g;s/\\x$//')" | dd of=${NVMEM_FILE} count=1 bs=6 seek="$(get_cell_offset "${2}")" oflag=seek_bytes status=none
}

write_macs()
{
	mac1="${1}"
	mac0_numeric="$(( 0x${mac1//:/} + 1 ))"
	mac0_hex="$(printf "%012x" ${mac0_numeric} | sed 's/../&:/g;s/:$//')"

	if ${enable_write} ; then
		if ${nvmem}; then
			mac1_numeric="$(( 0x${mac1//:/} ))"
			set_mac "${mac0_numeric}" "${MACB0_ADDRESS_NODE}"
			set_mac "${mac1_numeric}" "${MACB1_ADDRESS_NODE}"
		else
			for i in ${writes}; do
				echo -e "ethaddr=${mac0_hex}\neth1addr=${mac1}\n" | fw_setenv ${fw_opt} -s -
			done
		fi
	else
		printf "simulate write macb0: %s\n" "${mac0_hex}"
		printf "simulate write macb1: %s\n" "${mac1}"
		printf "(specify -f to write)\n"
	fi
}

erase_macs() {
	${enable_erase} || return

	if ${nvmem}; then
		set_mac 0 "${MACB0_ADDRESS_NODE}"
		set_mac 0 "${MACB1_ADDRESS_NODE}"
	fi

	for i in ${writes}; do
		echo -e "ethaddr=\neth1addr=\n" | fw_setenv ${fw_opt} -s -
	done
}

while true ; do
	case "${1}" in
		"-nand") shift ; fw_opt="-c /etc/fw_env_flash.config" ;;
		"-f") shift ; enable_write=true ;;
		"-e") shift ; enable_erase=true ;;
		"-s") shift ; writes=1 ;;
		"-nvmem") shift ; nvmem=true ;;
		"--") shift; break ;;
		*) break ;;
	esac
done

case "${#}" in
	0)	enable_erase && erase_macs || print_macs ; exit ;;
	1)	;;
	*)	usage ; exit ;;
esac

# Support MAC address from bar code scanner (without ':'), production request
case "${1}" in
	*:*)
		MAC_ADDRESS="${1}"
		;;
	*)
		MAC_ADDRESS=$(echo "${1}" | sed 's/../&:/g;s/:$//')
		;;
esac

[ "${#MAC_ADDRESS}" -ne "${MAC_ADDRESS_PARAM_LEN}" ] && usage && exit

write_macs "${MAC_ADDRESS}"
print_macs
