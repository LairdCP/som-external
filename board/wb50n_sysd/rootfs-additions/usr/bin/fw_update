#! /bin/sh

notify() {
    [ -x /usr/sbin/device_update.sh ] && /usr/sbin/device_update.sh "${1}"
}

die() {
    case "${o_method}" in
    complete*)
        [ -d /sys/class/ubi0 ] && ubidetach -d 0
        ;;
    esac

    notify failed
    [ -z "${1}" ] || echo "${1}" >&2
    echo "Firmware update failed" >&2
    exit 1
}

usage() {
    cat << --EOF--
"Usage: $0: [-m <method>] [-s <side>] [-x value] [-f] [-v] <url>"
    -m - Updated method (full, main, complete, etc) (default: full - NAND, complete - SD)
    -s - Update side (a, b) (default: automatic)
    -x - Extended options (r - no reboot)
    -f - Factory provision mode (default: off)
    -v - Verbose mode (default: off)
    url - URL to update package
--EOF--
    exit 3
}

[ $# -ge 1 ] || usage

o_verbose=
o_quiet=true
o_restart=true
o_factory=false

# determine update side
grep -q "ubi.block=0,1" /proc/cmdline && o_side=b || o_side=a

grep -q "root=/dev/mmcblk" /proc/cmdline && \
    run_on_sd=true || run_on_sd=false

${run_on_sd} && o_method=complete || o_method=full

while getopts m:s:x:fv name; do
    case ${name} in
    m)  o_method=${OPTARG} ;;
    s)  o_side=${OPTARG} ;;
    x)  case "${OPTARG}" in
            *r*) o_restart=false ;;
        esac ;;
    f)  o_factory=true ;;
    v)  o_verbose="-v"; o_quiet=false ;;
    ?)  usage ;;
    esac
done
shift $((OPTIND - 1))

url="${1}"

if [ "${o_method}" = complete ]; then
    ${run_on_sd} || die "only 'full' or 'main' update methods supported when booting from flash"
    p_method=${o_method}
else
    ${run_on_sd} && die "only 'complete' update method supported when booting from sd card"
    p_method=${o_method}-${o_side}
fi

notify updating

${o_quiet} && exec >/dev/null

case "${url}" in
file://*)
    url="${url#file://}"
    [ -r "${url}" ] || die "File ${url} not found"
    ;;

*://*)
    case "${url%:*}" in
    http|https|ftp)
        if [ -x /usr/bin/curl ]; then
            /usr/bin/curl -LsfI ${url} || die "File ${url} not found"
        elif [ -x /usr/bin/wget ]; then
            /usr/bin/wget -T4 -t1 --spider -qO - ${url} || die "File ${url} not found"
        fi
        ;;
    esac

    if [ -x /usr/bin/curl ]; then
        ${o_quiet} && o_dlsilent="-s"
        download_cmd="/usr/bin/curl -Lf ${o_dlsilent} ${url}"
    elif [ -x /usr/bin/wget ]; then
        ${o_quiet} && o_dlsilent="-q"
        download_cmd="/usr/bin/wget -T4 -t1 ${o_dlsilent} -O - ${url}"
    else
        die "Download utility not found (need curl or wget)"
    fi
    ;;

*)
    [ -r "${url}" ] || die "File ${url} not found"
    ;;
esac

case "${o_method}" in
complete*)
    if ${o_factory}; then
        mtdparts=$(sed -n 's/\(mtd.*\):.*u-boot.*/\1/p' /proc/mtd)
        for mtd in ${mtdparts}; do
            nandtest -m /dev/${mtd}
        done

        . erase_som_nand
    fi

    ubimtd=$(sed -n 's/^\(.*\):.*"ubi"$/\1/p' /proc/mtd)
    [ -z "${ubimtd}" ] || ubiformat /dev/${ubimtd} -y
    ;;
esac

case "${url}" in
*://*)
    ${download_cmd} | swupdate-client -e stable,${p_method} ${o_verbose} - || die ""
    ;;

*)
    swupdate-client -e stable,${p_method} ${o_verbose} "${url}" || die ""
    ;;
esac

case "${o_method}" in
complete*)
    [ -d /sys/class/ubi/ubi0 ] && ubidetach -d 0
    ;;
*)
    if [ -x /usr/sbin/migrate_data.sh ]; then
        /usr/sbin/migrate_data.sh || die "Data migrate failed"
    fi
    ;;
esac

notify complete
echo "Firmware update succeeded" >&2

if ${o_restart} && ! ${run_on_sd}; then
    reboot
fi
